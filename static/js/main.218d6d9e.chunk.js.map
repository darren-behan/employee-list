{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","Table","state","employee","columns","dataField","text","sort","filter","textFilter","striped","hover","keyField","data","employees","this","filterFactory","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s6EAOeA,MAJf,SAAiBC,GACf,OAAO,0BAAMC,UAAU,WAAWD,EAAME,W,MCQ3BC,MATf,WACI,OACE,yBAAKF,UAAU,UACb,6CACA,sH,0CCuCOG,E,4MAxCbC,MAAQ,CACNC,SAAU,GACVC,QAAS,CACP,CACEC,UAAW,OACXC,KAAM,OACNC,MAAM,EACNC,OAAQC,wBAEV,CACEJ,UAAW,QACXC,KAAM,QACNC,MAAM,GAER,CACEF,UAAW,QACXC,KAAM,QACNC,MAAM,GAER,CACEF,UAAW,MACXC,KAAM,MACNC,MAAM,K,uDAKV,OACE,kBAAC,IAAD,CACEG,SAAO,EACPC,OAAK,EACLC,SAAS,KACTC,KAAMC,EACNV,QAASW,KAAKb,MAAME,QACpBI,OAASQ,Y,GAnCGC,aCaLC,E,uKATX,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUD,aCKEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.218d6d9e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\">{props.children}</main>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport \"./index.css\";\n\nfunction Header () {\n    return (\n      <div className=\"header\">\n        <h1>Employee List</h1>\n        <p>Click on a heading to filter by heading or use the search box to narrow your results.</p>\n      </div>\n    )\n  }\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport employees from \"../../Employees.json\";\n\nclass Table extends Component {\n  state = {\n    employee: [],\n    columns: [\n      {\n        dataField: \"name\",\n        text: \"Name\",\n        sort: true,\n        filter: textFilter()\n      },\n      {\n        dataField: \"email\",\n        text: \"Email\",\n        sort: true,\n      },\n      {\n        dataField: \"phone\",\n        text: \"Phone\",\n        sort: true,\n      },\n      {\n        dataField: \"dob\",\n        text: \"DOB\",\n        sort: true,\n      }\n    ],\n  };\n  render() {\n    return (\n      <BootstrapTable\n        striped\n        hover\n        keyField=\"id\"\n        data={employees}\n        columns={this.state.columns}\n        filter={ filterFactory() }\n      />\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Table from './components/Table';\n\nclass App extends Component {\n  render() {\n    return (\n      <Wrapper >\n        <Header />\n        <Table />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}